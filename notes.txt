
**** Everything in Python is Object *****
**** Every object contains set of methods ******


Objects
---------

number
-----
- number can be integer or octal or hexa or decimal.

aval = 10
bval = 45.4

string
------
string can be defined in single quotes OR double quotes or triple triples.

aname = 'python programming'
bname = "scala programming"
cname = """hadoop administration"""


list  ( array in C )
------
list contains set of elements.
Elements can be set of numbers or strings or any combination
list elements are defined in [].


alist = [10,45,56,4]
blist = ["unix","linux","hadoop"]
clist = [45,6,56.5,"unix","oracle"]


tuple    ( READ ONLY , IMMUTABLE , UNCHANGABLE )
-------
tuple contains set of elements.
Elements can be set of numbers or strings or any combination
tuple elements are defined in ().
********* Elements inside tuple cannot be modified directly **************


atup = (35,45,43,4355,56)
btup = ("unix","java","ruby","perl")
ctup = (35,"python",56.54



dictionary (  hash or map )
----------------------------
dictionary contains elements in key value pairs
dictionary elements are defined in  {}.
key is used to identify the value.
** keys : number or string
  values: number or string or list or tuple or dictionary

syntax :     object = {key:value  , key:value , key:value }
              book  = {"chap1":10 ,"chap2":20 ,"chap3":30 }
             values = {1:2,3:4,5:6}
             book  = {"chap1":["Rita","UK",24] ,"chap2":["Rao","US",50] ,"chap3":["Gita","AUS",30] }




set
-----
set is UNORDERED collection of UNIQUE elements of SAME TYPE.
set elements are defined in {}.


aset = {10,10,10,20,20}




functions and methods
--------------------

methods : methods are object specific.
          Every object has its own different methods.
          string methods are different, list methods are different
          methods are accessible with . operator

functions : functions are common for all the objects
            print()
            len()


builtin functions
------------------

print()
len()
type()
input()   ---> python3         raw_input()  ---> python2
isinstance()
range()
min()
max()
sum()
id()
help()
dir()

conversion functions ( typecasting )
------------------------------------
int()
float()
oct()
hex()
str()
list()
tuple()
dict()
set()


How to display all the available builtin functions?
-------------------------------------------------------


In the console

dir(__builtins__)


statements
-----------


conditional statements
--------------------
if
if-else
if-elif-elif...else    


control statements  ( No do..while , switchcase )
------------------
for
while


jump statements
------------------
break
continue






level1
level1
level1
if cond:
     level2
     level2
     level2
     level2
level1
level
level1




level1
level1
level1
if cond:
     level2
     if cond:
	level3
	level3
	level3
     level2
     level2
level1
level
level1


file  handling
----------------
There are 2 types of files.

flat files ( csv log conf tsv  .properties txt )




third party files 
---------------
ALl the files ending with .docx/doc  pdf  xlsx/xls  mp4 mp3  are opened with some third party library.



syntax:

opening the file
---------------

syntax :    object= open(filename,mode)
Example:    fobj  = open("abc.txt","r")  # read mode

            fobj  = open("abc.txt","w")  # write mode
            case1 : If the file is not existing ... file gets created first
            case2 : If the file is already existing.. it overwrites the file content completely

            fobj  = open("abc.txt","a")  # append mode
            case1 : If the file is not existing ... file gets created first
            case2 : If the file is already existing.. it appends the data to the file
        


closing the file
--------------

fobj.close()



read operation
---------------
  
- reading with file object
- fobj.readlines()
- fobj.read()
- using csv library
- using pandas library



exception handling
-------------------

Basically .. we have 2 types of errors.

-syntax error
-semantic eroor or runtime error


Handling the errors in the runtime is known as exception handling


keywords used
==============

try    (mandatory)
except (mandatory)
else   (optional)
finally(optional)
raise  (optional)


libraries
----------
There are 2 types of libraries

-builtin libraries
-------------------
Builtin libraries are generally used(string manipulations, OS interactions,math operations, copy files ) by everyone
bulitin libraries are installed with python by default.
In general ... anaconda contains 8000+ libraries


-third party libraries
---------------------
Depending on the requirement( db programming, excel programming, cloud connectivity ,network programming,web development, machine learning, data analytics) developer has to third party library from www.pypi.org OR using pip tool  OR using easy_install .



importing library
------------------

import math            ( all the methods will be imported )
print(math.tan(2))
print(math.log(3))


importing required methods ONLY
------------------------------
from math import log,cos
print(log(3))
print(cos(1))

importing with alias name
--------------------------
import math as m
print(m.log(3))
print(m.floor(34.3))







builtin libraries
--------------

os     : os level operations( create directories | remove | list files | remove file | change file permissions)  
sys           : system config information
shutil        : copy, move , rmtree
urllib.request: working with http
math          : mathematical operations
random        : random numbers
calendar
smtplib       : sending mails
ftplib        : ftp'ng the file
sshlib        :
telnetlib     :
logging       : logging all the events
filecmp       : comparing directories
zipfile       : create/extract the zip files
rarfile       : create/extract the tar files
tarfile       : create/extract the tarfiles
getpass       : shadowing the password
json          : reading/writing json files
csv           : reading/writing csv files
xml        
sysconfig     : system configuration
collections   : working with dictionaries
argparse      : passing args from command line
optparse      : passing args from command line
time          : working with date and time
datetime      : working with date and time
cryptography  : encrypting and decrypting the passwords
heapq         : performing array operations
gzip          : reading gunzip files
re            : validating the strings|patterns
ipadresss     : validting ip address
platform      : display platform information
pathlib       : creating temp files
threading     : for performing multi threading
multiprocessing:
subprocess    : invoking the system commands ( linux or dos commands)



frequently used third party libraries  ( from pypi.org )
---------------------------------------
database related
----------------
pymysql   : (Mysql)
cx_Oracle   ( Oracle)
pymongo     ( MongoDB)
pymssql     ( SQL Server)
 

web frameworks ( developing web applications)
--------------
django
flask
bottle

cloud
---------
boto3    ( amazon aws)
azure    ( microsoft azure)
oci      ( oracle cloud)
gcp      ( google cloud)








 


analytics/machine learning
---------------------------
numpy
scipy
pandas ( processing|data cleaning)
seaborn
plotly
ggplot
matplotlib   : visualizing data .. bar graph.. pie graph
scikit-learn :  machine learning algorithms

image processing
---------------
pillow
opencv

APIs ( REST API)
-----
requests



excel programming
------------------
openpyxl    : reading/write excel files
xlsxwriter  : writing to excel file
python-docx : working with ms-word

networking
-----------
paramiko   :  interacting with remote servers
netmiko    :  connecting to router/switch
pysftp     :
ftplib     :
pyping     :  ping any host or ip address
os.system():
subprocess.














definition | function | subroutine | submodule
---------------------------------------------
some set of lines written for the reusability purpose.

def








same program
-------------
- file handling                     def file_handling()
- connecting to remote server       def remote_server()
- web scraping                      def
- database progamming
- deleting all the files



Relational database : oracle mysql sqlserver sybase


non relational database : mongodb






creating database
------------------
create database information ;

display all existing databases
-----------------------------
show databases;

access your database
-------------------
use information ;

display all existing tables
---------------------------
show tables ;                 ( intially it will be empty)


creating table
--------------
create table realestate(street varchar(200), city varchar(200));

inserting records
--------------------
insert into realestate values('Miyapur','Hyderabad');
insert into realestate values('MG Road','Hyderabad');

display all the records
-----------------------
select * from realestate;



python's inbuilt database :   sqlite3  ( light weighted db)










steps involed in connecting to database
------------------------------------

-connecting to the database
- prepare your query
- execute the query
- fetch the data
- close






















































